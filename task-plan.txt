Project Plan: Employee Onboarding Form

This plan outlines the steps to build the multi-step employee onboarding form as per the task requirements.

**Phase 1: Project Setup & Foundation**
- **Goal:** Prepare our project with all the necessary tools and configurations.
- **Steps:**
    1.  **Install Dependencies:** Install `react-hook-form`, `zod`, and other libraries required by `shadcn/ui`.
    2.  **Initialize `shadcn/ui`:** Use the `init` command to set up base styling and component configuration.
    3.  **Folder Structure:** Create a `components` folder for UI components, a `lib` folder for utilities and validation schemas, and a `data` folder for mock data.
    4.  **Mock Data:** Create a file (`data/mockData.ts`) to store the manager and skills data.

**Phase 2: Building the Multi-Step Form Structure**
- **Goal:** Create the main container for our form that manages steps and overall state.
- **Steps:**
    1.  **Form State Management:** Create a central component to hold the entire form's data using `react-hook-form`. This will act as our single source of truth and fulfill the "Auto-save form state in local React state" requirement.
    2.  **Step Navigation:** Use React's `useState` to keep track of the current step number.
    3.  **Navigation Controls:** Add "Next" and "Back" buttons.
    4.  **Progress Indicator:** Build a simple component to show the user which step they are on (e.g., "Step 1 of 5").

**Phase 3: Creating Each Form Step**
- **Goal:** Build each of the five form steps as a separate, focused React component.
- **Process (repeated for each step):**
    1.  **Create Component File:** e.g., `components/form/Step1_PersonalInfo.tsx`.
    2.  **Add `shadcn/ui` Components:** Use the CLI to add required components (Input, Select, DatePicker, etc.).
    3.  **Define Validation Schema:** Use `zod` to define the validation rules for the fields in the current step.
    4.  **Connect UI to Form Logic:** Use `react-hook-form` to register components and display validation errors.

**Phase 4: Implementing Smart Logic and UX Features**
- **Goal:** Make the form dynamic and user-friendly.
- **Steps:**
    1.  **Conditional Fields:** Implement logic to show/hide fields based on user input (e.g., Guardian Contact fields if age < 21, "Manager Approved" checkbox if remote preference > 50%).
    2.  **Dynamic Data:** Filter the Manager and Skills lists based on the selected Department.
    3.  **Step-by-Step Validation:** Ensure a user can't proceed to the next step if the current step has validation errors.
    4.  **Review Page:** Build the final read-only summary step.
    5.  **Unsaved Changes Warning:** Implement a browser alert if the user tries to navigate away with unsaved changes.

**Phase 5: Finalizing the Project**
- **Goal:** Clean up, document, and prepare the project for submission.
- **Steps:**
    1.  **Form Submission Logic:** Handle the final submission, logging the complete, structured data to the console.
    2.  **Create `README.md`:** Document how to run the project, explain complex logic, and list any assumptions made.
    3.  **Code Cleanup:** Do a final review of the code for clarity, consistency, and best practices.
